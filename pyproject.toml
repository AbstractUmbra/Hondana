[project]
name = "Hondana"
description = "An asynchronous wrapper around the MangaDex v5 API"
authors = [{ name = "Alex NÃ¸rgaard", email = "umbra@abstractumbra.dev" }]
dependencies = ["aiohttp<4.0,>=3.9"]
requires-python = "<4.0,>=3.11"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["mangadex", "manga", "api", "wrapper"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
"Issue Tracker" = "https://github.com/AbstractUmbra/hondana/issues"
Discord = "https://discord.gg/aYGYJxwqe5"
repository = "https://github.com/AbstractUmbra/hondana"

[project.optional-dependencies]
speed = ["orjson", "aiohttp[speedups]"]

[dependency-groups]
dev = ["ruff", "typing-extensions", "pre-commit"]
docs = ["sphinx", "sphinxcontrib-trio", "furo"]
tests = ["pytest", "pytest-asyncio"]

[project.scripts]
version = "hondana.__main__:show_version"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
path = "hondana/__init__.py"

[tool.hatch.build]
dev-mode-dirs = ["hondana", "."]
ignore-vcs = true
sources = ["hondana"]

[tool.hatch.build.targets.sdist]
exclude = ["docs", ".github"]
include = ["hondana/*", "tests/*", "LICENSE"]
skip-excluded-dirs = false

[tool.hatch.build.targets.wheel]
packages = ["hondana"]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "session"
testpaths = ["tests"]

[tool.ruff]
line-length = 125
target-version = "py311"
exclude = ["docs/"]

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN401",
    "C901",    # we use non-nested ifs to handle request parameters
    "COM812",  # to use ruff formatter
    "D105",    # not necessary here
    "D400",
    "D401",
    "F401",
    "F402",
    "F403",
    "F405",
    "N818",    # I can name my exceptions whatever I want
    "PD011",   # this is not a numpy codebase
    "PERF203",
    "PLC0414", # pyright ruling for `as` imports needed
    "PLR",     # I don't like these rules
    "Q000",
    "RUF001",
    "RUF009",
    "SIM105",
    "TRY003",  # over-eager rule
    "TRY301",  # unrealistic rule
    "UP034",
    "UP038",
]

unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",      # tests dont get documented
    "DOC",    # tests dont get documented
    "EM101",  # testing exceptions are okay I feel
    "INP001", # we don't import tests generally
    "S101",   # we use `assert` in tests
    "SLF001", # we use private attrs during tests
]
"hondana/enums.py" = [
    "D101", # Enums are documented manually
]
"hondana/types_/*" = [
    "D101",   # not really documented
    "D200",   # not really documented
    "D205",   # not really documented
    "INP001", # we don't use the types namespace as a package
]
"examples/*" = [
    "CPY001", # not necessary
    "D",      # no docs needed there
    "INP001", # this is the examples directory
    "RET504", # this is done for commenting purposes
    "S106",   # no secure values are used
    "T201",   # we showcase examples using print
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"

[tool.pyright]
venvPath = "."
venv = ".venv"
exclude = [
    "**/__pycache__",
    "docs/**/*.py",
    "tests/_update_payloads.py",
    "./_preflight.py",
]
ignore = [
    "**/__pycache__",
    "docs/**/*.py",
    "tests/_update_payloads.py",
    "./_preflight.py",
]
include = ["hondana", "tests", "examples"]
useLibraryCodeForTypes = true
typeCheckingMode = "strict"
reportImportCycles = false
pythonVersion = "3.11"
