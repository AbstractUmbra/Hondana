[tool.poetry]
name = "Hondana"
version = "3.6.0"
description = "An asynchronous wrapper around the MangaDex v5 API"
authors = ["Alex NÃ¸rgaard <umbra@abstractumbra.dev>"]

license = "MIT"
readme = "README.md"
repository = "https://github.com/AbstractUmbra/hondana"

keywords = ["mangadex", "manga", "api", "wrapper"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Typing :: Typed",
]
include = ["LICENSE"]
packages = [
    { include = "hondana" },
    { include = "hondana/**/*.py" },
    { include = "hondana/py.typed" },
    { include = "hondana/extras/tags.json" },
    { include = "hondana/extras/report_reasons.json" },
]

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/AbstractUmbra/hondana/issues"
"Discord" = "https://discord.gg/aYGYJxwqe5"

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = [
    { version = "^3.9" },
    { version = "^3.9", markers = "extra == 'speed'", extras = [
        "speedups",
    ] },
]
orjson = { version = "*", optional = true }

[tool.poetry.dev-dependencies]
poethepoet = "*"
pre-commit = "*"
ruff = "*"
typing-extensions = "*"

[tool.poetry.extras]
speed = ["aiohttp", "orjson"]

[tool.poetry.group.speedups.dependencies]
aiohttp = { version = "^3.9", extras = ["speedups"] }
orjson = "*"

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinxcontrib-trio = "*"
furo = "*"

[tool.poetry.group.tests.dependencies]
pytest = "*"
pytest-asyncio = "*"

[tool.poetry.scripts]
version = "hondana.__main__:show_version"

[tool.ruff]
line-length = 125
target-version = "py311"
exclude = ["docs/"]

[tool.ruff.lint]
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DOC",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "FURB",
    "G",
    "I",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PLC",
    "PLE",
    "PLW",
    "PTH",
    "PYI",
    "Q",
    "Q003",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
ignore = [
    "ANN401",
    "DOC501",  # these currently don't work with sphinx
    "DOC502",  # these currently don't work with sphinx
    "F401",
    "F402",
    "F403",
    "F405",
    "PD011",   # this is not a numpy codebase
    "PERF203",
    "PLC0414", # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "SIM105",
    "TRY003",  # over-eager rule
    "TRY301",  # unrealistic rule
    "UP034",
    "UP038",
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # we use `assert` in tests
    "EM101",  # testing exceptions are okay I feel
    "INP001", # we don't import tests generally
]
"hondana/types_/*" = [
    "INP001", # we don't use the types namespace as a package
]
"examples/*" = [
    "INP001", # this is the examples directory
    "T201",   # we showcase examples using print
    "S106",   # no secure values are used
    "RET504", # this is done for commenting purposes
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"

[tool.pyright]
venvPath = "."
venv = ".venv/"
exclude = [
    "**/__pycache__",
    "docs/**/*.py",
    "tests/_update_payloads.py",
    "./_preflight.py",
]
include = ["hondana", "tests", "examples"]
useLibraryCodeForTypes = true
typeCheckingMode = "strict"
reportImportCycles = false
pythonVersion = "3.11"

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["tests"]

[tool.poe.tasks]
spec = "python _api_dl.py"
install = "poetry install --with tests,docs,speedups"
check = "ruff check . --preview" # we use preview rules
format = "ruff format ."
pyright = "pyright"
types_ = "pyright --ignoreexternal --verifytypes hondana"
types = ["pyright", "types_"]
tests = "pytest"
docs = "sphinx-build -aEWT --keep-going docs/ docs/build" # TODO: add -n when sphinx is fixed
tags = { script = "_preflight:__update_tags()" }
report_reasons = { script = "_preflight:__update_report_reasons()" }
uninstall = "pip uninstall hondana -y"
pre = [
    "install",
    "check",
    "format",
    "types",
    "tests",
    "docs",
    "tags",
    "report_reasons",
    "uninstall",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
