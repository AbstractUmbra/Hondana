# Runs a build test on commit to ensure functionality.

name: Build

on:
  push:
    tags:
      - '*.*.*'
  workflow_run:
    workflows: [ "Type Coverage and Linting" ]
    types: [ completed ]
    branches: [ main ]

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.x' ]

    name: "Build"
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Setup Poetry @ ${{ matrix.python-version }}"
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: false

      - name: "Setup Python @ ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install deps @ ${{ matrix.python-version }}"
        run: |
          poetry install --with docs,tests --no-interaction

      - name: Check it imports
        run: |
          poetry run python -c 'import hondana'

      - name: Test Suite
        run: |
          poetry run pytest

      - name: Build wheels
        run: |
          poetry build

      # TODO: add -n back to args after sphinx 5.0
      - name: Build docs
        run: |
          cd docs/
          poetry run sphinx-build -a -E -T -W --keep-going . build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: distributions
          path: dist/*

  # Credits to most of this step go to Gorialis (Devon R [https://github.com/Gorialis])
  # as I found them in their Jishaku builds (https://github.com/Gorialis/jishaku/blob/d3f50749b5a977b544e5fd14894585f656247486/.github/workflows/deploy.yml#L82-L119)
  create_release:
    name: Create Release
    needs: [ build ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: distributions
          path: dist

      - name: Create GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          assets=()
          for asset in ./dist/*.{whl,tar.gz}; do
            assets+=("-a" "$asset")
          done
          tag_name="${GITHUB_REF##*/}"
          hub release create "${assets[@]}" -F "CHANGELOG.md" "$tag_name"

      - name: "Set up Poetry"
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0
          virtualenvs-create: true
          virtualenvs-in-project: false

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish
